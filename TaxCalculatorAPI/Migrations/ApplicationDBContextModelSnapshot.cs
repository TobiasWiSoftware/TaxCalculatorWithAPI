// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxCalculatorAPI.Data;

#nullable disable

namespace TaxCalculatorAPI.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("TaxCalculatorLibary.Models.SocialSecurityRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EmployeeInsuranceBonusRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployeeInsuranceCareChildDiscountRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployeeInsuranceCareChildFreeRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployeeInsuranceCareRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployeeInsuranceRate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeMaxChildrenDiscount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeMinChildrenDiscount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EmployeePensionRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployeeUnemploymentRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployerInsuranceBonusRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployerInsuranceCareRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployerInsuranceRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployerPensionRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EmployerUnemploymentRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InsuranceMaxGross")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PensionAndUnimploymentMaxGross")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SocialSecurityRates");
                });

            modelBuilder.Entity("TaxCalculatorLibary.Models.TaxInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ChurchTaxRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxTaxLevel")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinLevelForSolidarityTax")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SolidaryTaxRate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxFreeBasicFlat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaxFreeChildFlat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaxFreeChildGrowingFlat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaxFreeEmployeeFlat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TaxInformation");
                });

            modelBuilder.Entity("TaxCalculatorLibary.Models.TaxInformationStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StepAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaxInformationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaxInformationId");

                    b.ToTable("TaxInformationStep");
                });

            modelBuilder.Entity("TaxCalculatorLibary.Models.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("VisitCounter")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("TaxCalculatorLibary.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaxCalculatorLibary.Models.TaxInformationStep", b =>
                {
                    b.HasOne("TaxCalculatorLibary.Models.TaxInformation", "TaxInformation")
                        .WithMany("TaxInformationSteps")
                        .HasForeignKey("TaxInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxInformation");
                });

            modelBuilder.Entity("TaxCalculatorLibary.Models.TaxInformation", b =>
                {
                    b.Navigation("TaxInformationSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
